House Rental System - Product Requirements Document (PRD)
1. Project Overview
1.1 Product Vision
The House Rental System is a web-based platform designed to streamline property rentals in Tanzania by connecting property owners with tenants. It enables efficient property listing, search, viewing requests, and secure payment processing with automated commission management, providing a user-friendly and scalable solution for urban rental markets.
1.2 Target Market

Primary: Individual tenants and property owners in Tanzania.
Secondary: Real estate agents and small property management firms.
Geographic Focus: Urban centers (Dar es Salaam, Mwanza, Arusha, Mbeya).

1.3 Business Model

Revenue: 15% commission on successful rental transactions.
Freemium Model: Free property listings with premium features (e.g., boosted visibility).
Scalability: Expandable to other East African markets post-MVP.

2. Technical Architecture
2.1 System Stack
Frontend Technologies:

Framework: React.js with JSX for dynamic, component-based UI.
Styling: Tailwind CSS for utility-first, responsive design.
UI Library: Lucide UI for lightweight icons and minimal components (e.g., buttons, modals).
State Management: React Context API for simple state; Redux for complex scenarios.
Responsive Design: Mobile-first approach using Tailwind CSS utilities.

Backend Technologies:

Platform: Supabase for authentication, database, storage, and APIs.
Database: Supabase (PostgreSQL-based) for structured data.
API: Supabase RESTful APIs with JSON responses; Edge Functions for custom logic.
Authentication: Supabase Auth with JWT for secure user sessions.
Real-time: Supabase Realtime for live updates (e.g., viewing request status).

Infrastructure:

Hosting: Vercel for frontend; Supabase for backend.
CDN: Cloudflare or Vercel for static assets (images, CSS).
Payment Gateways: M-Pesa (STK Push), Tigo Pesa, Stripe for international payments.
Storage: Supabase Storage for property images and documents.

2.2 Database Schema
-- Core Tables (Managed in Supabase)

Users:
- user_id (UUID, Primary Key, auto-generated by Supabase Auth)
- full_name (TEXT)
- email (TEXT, UNIQUE)
- phone_number (TEXT)
- user_role (TEXT, ENUM: admin, tenant, owner)
- is_verified (BOOLEAN)
- profile_image (TEXT, Supabase Storage URL)
- created_at (TIMESTAMP)

Properties:
- property_id (UUID, Primary Key)
- owner_id (UUID, Foreign Key referencing Users)
- title (TEXT)
- description (TEXT)
- price_monthly (NUMERIC)
- address (TEXT)
- latitude (NUMERIC)
- longitude (NUMERIC)
- bedrooms (INTEGER)
- bathrooms (INTEGER)
- property_type (TEXT, ENUM: house, apartment, studio)
- amenities (JSONB)
- images (JSONB, array of Supabase Storage URLs)
- status (TEXT, ENUM: available, rented, maintenance)
- created_at (TIMESTAMP)
- updated_at (TIMESTAMP)

Viewing_Requests:
- request_id (UUID, Primary Key)
- property_id (UUID, Foreign Key referencing Properties)
- tenant_id (UUID, Foreign Key referencing Users)
- requested_date (DATE)
- preferred_time (TEXT)
- status (TEXT, ENUM: pending, approved, rejected, completed)
- notes (TEXT)
- created_at (TIMESTAMP)

Payments:
- payment_id (UUID, Primary Key)
- property_id (UUID, Foreign Key referencing Properties)
- tenant_id (UUID, Foreign Key referencing Users)
- amount_total (NUMERIC)
- commission_amount (NUMERIC, 15% of total)
- owner_amount (NUMERIC, 85% of total)
- payment_method (TEXT, ENUM: mpesa, tigo, stripe)
- transaction_ref (TEXT)
- status (TEXT, ENUM: pending, completed, failed)
- payment_date (TIMESTAMP)

Commission_Settings:
- setting_id (UUID, Primary Key)
- commission_rate (NUMERIC, default 0.15)
- payment_methods (JSONB)
- updated_by (UUID, Foreign Key referencing Users)
- updated_at (TIMESTAMP)

3. User Roles & Permissions
3.1 System Administrator

Access: Full system control via Supabase dashboard.
Features:
View analytics (users, properties, revenue).
Manage users (approve, suspend).
Configure commission rates.
Monitor payments and system health.


Permissions: Full CRUD on all tables; access to financial reports.

3.2 Property Owner

Access: Owner dashboard.
Features:
List and manage properties.
View tenant details and viewing requests.
Track payments (85% after commission).
Submit maintenance requests.


Permissions: CRUD on own properties; read-only access to tenant data.

3.3 Tenant

Access: Tenant portal.
Features:
Search and filter properties.
Submit viewing requests.
Process payments.
View rental history and profile.


Permissions: Read-only access to properties; CRUD on own requests and profile.

4. Core System Features
4.1 Homepage

Components:
Hero section with search bar (location, price, type filters).
Featured properties carousel (Tailwind CSS, Lucide UI arrows).
Location-based suggestions (mock data initially).
Login/Register links (Lucide UI modals).
About and contact footer.


Navigation:Header: Logo | Search | Properties | About | Contact | Login/Register
Main: Property listings with filters
Footer: Links | Social Media | Terms | Privacy



4.2 Property Search & Filters

Filters:
Location (city, district, neighborhood dropdowns).
Price range slider (Tailwind CSS).
Property type (house, apartment, studio).
Bedrooms/bathrooms selectors.
Amenities checkboxes (e.g., parking, Wi-Fi).
Availability date picker (Lucide UI calendar icon).


Display:
Grid/list toggle (Tailwind CSS grid).
Sort by price, date, or relevance.
Pagination with “Load More” (Lucide UI button).
Map view (Google Maps placeholder).



4.3 Property Details

Components:
Image gallery (Supabase Storage, Tailwind CSS).
Specs table (bedrooms, bathrooms, etc.).
Map (Google Maps iframe).
Amenities list (Lucide UI icons).
Similar properties (mock data).


Actions (Lucide UI buttons):
“Request Viewing” (form).
“Save” (favorite toggle).
“Share” (social share modal).
“Report Issue” (form).



4.4 Viewing Request System

Tenant Interface:
Form for date/time preferences.
Status tracking (Supabase Realtime).
Notifications for updates.


Admin Interface:
Request queue with sorting.
Approve/reject buttons (Lucide UI).
Calendar view for scheduling.
Analytics (e.g., request volume).



4.5 Payment Processing

Flow:
Summary: Display rent, 15% commission, total (e.g., TSh 500,000 + TSh 75,000 = TSh 575,000).
Methods: M-Pesa, Tigo Pesa, Stripe (Lucide UI selectors).
Confirmation: Real-time status, PDF receipt, notifications.


Backend:
Calculate 85/15 split (Supabase Edge Function).
Log transactions in Payments table.
Secure webhook handling.



4.6 Admin Dashboard

Analytics:
Total properties, requests, revenue.
User growth trends.


Tools:
Property approval workflow.
User verification (Supabase Auth).
Payment queue monitoring.
Report generation (CSV export).



5. User Experience (UX)
5.1 Responsive Design

Desktop (1200px+): Multi-column grid, sidebar filters (Tailwind CSS).
Tablet (768px-1199px): Two-column layout, collapsible filters.
Mobile (320px-767px): Single-column list, bottom sheet filters, swipeable galleries.
Use Tailwind CSS responsive classes (sm:, md:, lg:).

5.2 Accessibility

WCAG 2.1 AA compliance (ARIA labels, keyboard navigation).
High contrast mode (Tailwind CSS).
Swahili/English toggle (i18next library).
Screen reader support for all UI elements.

6. API Specifications
6.1 Core Endpoints (Supabase)

Authentication:POST /auth/v1/signup
POST /auth/v1/token
POST /auth/v1/logout
POST /auth/v1/recover


Properties:GET /rest/v1/properties?select=*
GET /rest/v1/properties?id=eq.<id>
POST /rest/v1/properties (owner/admin)
PATCH /rest/v1/properties?id=eq.<id> (owner/admin)
DELETE /rest/v1/properties?id=eq.<id> (admin)


Viewing Requests:GET /rest/v1/viewing_requests?select=*
POST /rest/v1/viewing_requests
PATCH /rest/v1/viewing_requests?id=eq.<id>&status=eq.<status>
GET /rest/v1/viewing_requests?tenant_id=eq.<tenant_id>


Payments (Edge Functions):POST /functions/v1/payments/initiate
GET /rest/v1/payments?id=eq.<id>&select=status
POST /functions/v1/payments/callback
GET /rest/v1/payments?tenant_id=eq.<user_id>



6.2 Integrations

Payments: M-Pesa (STK Push), Tigo Pesa, Stripe.
Location: Google Maps API (geocoding, maps).
Notifications: Twilio (SMS), SendGrid (email), Supabase Realtime (push).

7. Security & Performance
7.1 Security

Data: SSL/TLS (Supabase/Vercel), bcrypt for passwords (Supabase Auth).
Access: Supabase RLS for role-based access, JWT sessions, MFA option.
Payments: PCI DSS compliance, secure webhooks, encrypted storage.
Protection: CSRF tokens, XSS prevention, rate limiting.

7.2 Performance

Frontend: Lazy loading, code splitting, minification (Vercel).
Backend: Query optimization, API caching (Supabase).
Metrics: Page load < 3s, API response < 500ms, 99.9% uptime.

8. Testing Strategy
8.1 Testing Types

Unit: React components (React Testing Library), Edge Functions.
Integration: Supabase APIs, payment gateways, Google Maps.
User Acceptance: Role-based workflows, cross-browser, mobile responsiveness.

8.2 Quality Assurance

Automated CI/CD pipeline (Vercel/Supabase).
Code reviews with ESLint/Prettier.
Security scans for vulnerabilities.

9. Deployment
9.1 Environments

Development: Supabase CLI, local React server.
Staging: Supabase staging project, Vercel preview.
Production: Supabase production, Vercel, backups enabled.

9.2 DevOps

Git for version control.
CI/CD via Vercel (frontend) and Supabase (backend).
Monitoring with Supabase analytics.

10. Launch Plan
10.1 MVP Features

User authentication (Supabase Auth).
Property listing and search.
Viewing request system.
Payment processing with commission split.
Basic admin dashboard.

10.2 Timeline

Phase 1 (Frontend): 2-3 months.
Phase 2 (Backend): 3-4 months.
Total: 6-8 months.

10.3 Success Metrics

Technical: Page load < 3s, API < 500ms, payment success > 95%.
Business: 500 users, 100 listings, 50 transactions in 3 months.

11. Budget & Resources
11.1 Team

Full-Stack Developer (Supabase/React).
Frontend Developer (Tailwind/Lucide UI).
UI/UX Designer.
QA Tester.
DevOps Engineer (part-time).
Project Manager.

11.2 Costs

Supabase: $25-100/month.
Vercel: $20-50/month.
CDN/Storage: $10-30/month.
Payment fees: 2-3% per transaction.
APIs (Google Maps, Twilio): $50-100/month.

12. Risk Management
12.1 Technical Risks

Supabase rate limits, payment integration issues.
Mitigation: Test integrations, scale Supabase plan, monitor limits.

12.2 Business Risks

Low adoption, regulatory changes.
Mitigation: Market research, legal review, user feedback loops.

13. Maintenance & Support
13.1 Maintenance

Regular updates for security/performance.
Feature enhancements based on feedback.
Database optimization (Supabase).

13.2 Support

Help documentation (Swahili/English).
Customer support via email/SMS.
Community forum for users.